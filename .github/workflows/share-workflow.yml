name: Webhook Disptacher Deploy
on:
  workflow_dispatch:
    inputs:
      client:
        description: 'client name, for all use: All'
        required: true
        default: 'All'
      stage:
        description: ' new stage i.e. staging or prod only '
        required: true
        default: 'prod'
      project:
        description: 'Project or microservice name'
        required: true
        default: 'webhook_dispatcher'

jobs:
  variables-check:

    env:
      project: ${{ github.event.inputs.project }}

    runs-on: ubuntu-latest
    outputs:
      client-list-mutiple: ${{ steps.client-all.outputs.client-list1 }}
      client-list-one: ${{ steps.client-single.outputs.client-list2 }}

    steps:

    - name: Variables defeined
      run:
          echo "Client Selected - ${{ github.event.inputs.client }}"
          echo "Stage Selected - ${{ github.event.inputs.stage  }}"

    ##################### initial variable verification ########

    - name: Check stage name
      run: |

          if [[ ${{ github.event.inputs.stage }} != "prod"  ]] && [[ ${{ github.event.inputs.stage }} != "staging"  ]]
          then
            echo "Please enter correct name for stage accepted value are 'prod' or 'staging' "
            exit 1;
          fi

    - uses: actions/checkout@v2

    - name: make script executable
      run: chmod +x deployment/client_list_verify.sh


    - name: Getting deployment clients if All is defined
      id: client-all
      if: github.event.inputs.client == 'All'
      run: echo "::set-output name=client-list1::$(tr '\n' ' ' < deployment/projects/${{ env.project }}/stages/${{ github.event.inputs.stage }}/clients.txt )"
    
    - name: Getting deployment clients if All is not defined
      id: client-single
      if: github.event.inputs.client != 'All'
      run: |
          /bin/bash deployment/client_list_verify.sh ${{ github.event.inputs.client }} ${{ github.event.inputs.stage }} ${{ env.project }}
          echo "::set-output name=client-list2::$(echo ${{ github.event.inputs.client }} | sed 's|,| |g')"

    - name: print 
      run: |
          echo ${{ steps.client-all.outputs.client-list1 }}

  variables-assignment:
    runs-on: ubuntu-latest
    needs: variables-check

    env:
      client-list-mutiple: ${{ needs.variables-check.outputs.client-list-mutiple }}
      client-list-one: ${{ needs.variables-check.outputs.client-list-one }}
      
    

    outputs:
      client-list-final: ${{ steps.client-list.outputs.client-name }}
    
    steps:

    
    - name: initial value assinging
      id: initial-value
      run: |
        if [[ ${{ github.event.inputs.client }}  == 'All' ]]; then echo LIST=$(echo "${{ env.client-list-mutiple }}" ) >> $GITHUB_ENV ; else echo LIST=$(echo "${{ env.client-list-one }}"  ) >> $GITHUB_ENV ; fi

    - name: final assingnmetn
      id: client-list
      run: echo "::set-output name=client-name::$(echo ${{ env.LIST }} | jq -R -s -c 'split(" ")' | sed 's|\\n||g' )"

    - name: print value of list
      run: echo "${{ env.LIST }} "

  generate-image-tag:
    needs: variables-check
    env:
      project: ${{ github.event.inputs.project }}

    outputs:
      processed-latest-image-tag: ${{ steps.processed-image-tag.outputs.processed-image-tag-id }}
      ecr-repo: ${{ steps.ecr-repo-details.outputs.ecr-repo-name }}

    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET }}
        aws-region: eu-central-1
        mask-aws-account-id: 'no'


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Getting ECR REPO details 
      id: ecr-repo-details
      run: |
        echo "::set-output name=ecr-repo-name::$(jq  -r '.${{ env.project }}'  deployment/ecr-repo.json | grep "ecr-repo" | awk '{print $2}' | sed 's|"||g' )"



    - name: get latest image
      id: latest-image-id
      run: |
        echo "::set-output name=latest-image-tag::$(aws ecr describe-images --repository-name ${{ steps.ecr-repo-details.outputs.ecr-repo-name }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)"

    - name: processed IMAGE TAG
      id: processed-image-tag
      run: |
          if [[ "${{ github.event.inputs.stage }}" == "prod" ]]
          then
          echo "I am called prod"
          echo "::set-output name=processed-image-tag-id::$(echo ${{ steps.latest-image-id.outputs.latest-image-tag }} 0.001| awk '{print $1 + $2}' )" 
          else
          echo "I am called not prod"
          echo "::set-output name=processed-image-tag-id::${{ steps.latest-image-id.outputs.latest-image-tag }}"
          fi

    - name: printing 
      run: echo ${{ steps.processed-image-tag.outputs.processed-image-tag-id }}




  update-ecr-image:

    needs: [variables-assignment, generate-image-tag]
    outputs:
      image-id: ${{ steps.build-image.outputs.ecr-image }}

    env:
      image-tag: ${{ needs.generate-image-tag.outputs.processed-latest-image-tag }}
      ecr-repo: ${{ needs.generate-image-tag.outputs.ecr-repo }}

    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET }}
        aws-region: eu-central-1
        mask-aws-account-id: 'no'


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: print latest image tag
      run: echo ${{ env.image-tag }}

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ecr-repo }}
        IMAGE_TAG: ${{ env.image-tag }}
      run: |
        # Build a docker container and push it to ECR
        if [[ "${{ github.event.inputs.stage }}" == "prod" ]]
        then
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        fi
        echo "::set-output name=ecr-image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: print IMAGE_TAG
      run: echo ${{ steps.build-image.outputs.ecr-image }}


  deploy:
    needs: [variables-assignment, update-ecr-image]
    env:
      stage-name: ${{ github.event.inputs.stage }}
      ECR_REPO: ${{ secrets.ECR_REPO }}
      image: ${{ needs.update-ecr-image.outputs.image-id }}

    strategy:
      matrix:
        client-list: ${{ fromJson(needs.variables-assignment.outputs.client-list-final) }}

    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: image value
      run: echo ${{ env.image }}
    
    - name: Install dependecies 
      uses: php-actions/composer@v6
      with:
        dev: no
        args: --profile --ignore-platform-reqs

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET }}
        aws-region: eu-central-1

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ matrix.client-list }}-${{ env.stage-name }}-task-definition \
        --query taskDefinition > ${{ matrix.client-list }}-${{ env.stage-name }}-task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ matrix.client-list }}-${{ env.stage-name }}-task-definition.json
        container-name: ${{ matrix.client-list }}-${{ env.stage-name }}-container
        image: ${{ env.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ matrix.client-list }}-${{ env.stage-name }}-service
        cluster: wunder
        wait-for-service-stability: true
